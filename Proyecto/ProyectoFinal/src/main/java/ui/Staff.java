
package ui;

import javax.swing.table.DefaultTableModel;
import javax.swing.*;
import domain.*;
import java.util.*;
import data.*;
import java.sql.*;
import ui.components.Icons;

/**
 *
 * @author User
 */
public class Staff extends javax.swing.JFrame {

    ManagerMenu menu;
    DefaultTableModel modelEmp = new DefaultTableModel();
    DefaultTableModel modelDel = new DefaultTableModel();
    List<Manager> managers = new ArrayList();
    ManagerDAO managerDAO;
    List<DeliveryDriver> deliveryDrivers = new ArrayList();
    DeliveryDriverDAO deliveryDriverDAO;
    Connection conexionTransaccional = null;
    SignInUI signIn;

    public Staff() {
        initComponents();
        setLocationRelativeTo(null);
        setResizable(false);
        jTableEmployees.setModel(modelEmp);
        jTableDelivery.setModel(modelDel);
        //agregar t√≠tulo columnas
        initManagerTable();
        initDeliveryTable();
        //
        showManagers();
        showDeliveryDrivers();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableEmployees = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableDelivery = new javax.swing.JTable();
        jBtnRemoveEmployee = new javax.swing.JButton();
        jBtnAddEmployee = new javax.swing.JButton();
        jBtnAddDeliverer = new javax.swing.JButton();
        jBtnRemoveDeliverer = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jBtnBack = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("ITSQMET BURGER");
        setIconImage(Icons.FRAME_ICON.getImage());

        jPanel1.setBackground(new java.awt.Color(238, 166, 94));

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("PERSONAL");

        jLabel2.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Empleados:");

        jTableEmployees.setBackground(new java.awt.Color(253, 243, 146));
        jTableEmployees.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(jTableEmployees);

        jLabel3.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Repartidores:");

        jTableDelivery.setBackground(new java.awt.Color(253, 243, 146));
        jTableDelivery.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane2.setViewportView(jTableDelivery);

        jBtnRemoveEmployee.setBackground(new java.awt.Color(255, 103, 87));
        jBtnRemoveEmployee.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jBtnRemoveEmployee.setForeground(new java.awt.Color(255, 255, 255));
        jBtnRemoveEmployee.setIcon(new ImageIcon("src/main/java/ui/resources/images/Delete.png"));
        jBtnRemoveEmployee.setText("QUITAR");
        jBtnRemoveEmployee.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnRemoveEmployeeActionPerformed(evt);
            }
        });

        jBtnAddEmployee.setBackground(new java.awt.Color(255, 103, 87));
        jBtnAddEmployee.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jBtnAddEmployee.setForeground(new java.awt.Color(255, 255, 255));
        jBtnAddEmployee.setIcon(new ImageIcon("src/main/java/ui/resources/images/Add.png"));
        jBtnAddEmployee.setText("AGREGAR");
        jBtnAddEmployee.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnAddEmployeeActionPerformed(evt);
            }
        });

        jBtnAddDeliverer.setBackground(new java.awt.Color(255, 103, 87));
        jBtnAddDeliverer.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jBtnAddDeliverer.setForeground(new java.awt.Color(255, 255, 255));
        jBtnAddDeliverer.setIcon(new ImageIcon("src/main/java/ui/resources/images/Add.png"));
        jBtnAddDeliverer.setText("AGREGAR");
        jBtnAddDeliverer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnAddDelivererActionPerformed(evt);
            }
        });

        jBtnRemoveDeliverer.setBackground(new java.awt.Color(255, 103, 87));
        jBtnRemoveDeliverer.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jBtnRemoveDeliverer.setForeground(new java.awt.Color(255, 255, 255));
        jBtnRemoveDeliverer.setIcon(new ImageIcon("src/main/java/ui/resources/images/Delete.png"));
        jBtnRemoveDeliverer.setText("QUITAR");
        jBtnRemoveDeliverer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnRemoveDelivererActionPerformed(evt);
            }
        });

        jBtnBack.setBackground(new java.awt.Color(255, 103, 87));
        jBtnBack.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jBtnBack.setForeground(new java.awt.Color(255, 255, 255));
        jBtnBack.setIcon(new ImageIcon("src/main/java/ui/resources/images/Exit.png"));
        jBtnBack.setText("VOLVER");
        jBtnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnBackActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 644, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 635, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addComponent(jBtnBack))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(9, 9, 9)
                                .addComponent(jLabel2))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(45, 45, 45)
                        .addComponent(jLabel3)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jBtnAddDeliverer)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jBtnRemoveDeliverer)
                                .addGap(49, 49, 49))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jBtnAddEmployee)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jBtnRemoveEmployee)
                                .addGap(49, 49, 49))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 668, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jLabel1)
                .addGap(27, 27, 27)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBtnRemoveEmployee)
                    .addComponent(jBtnAddEmployee))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBtnRemoveDeliverer)
                    .addComponent(jBtnAddDeliverer))
                .addGap(18, 18, 18)
                .addComponent(jBtnBack)
                .addContainerGap(30, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 18, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jBtnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnBackActionPerformed
        menu = new ManagerMenu();
        menu.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jBtnBackActionPerformed

    private void jBtnRemoveEmployeeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnRemoveEmployeeActionPerformed
        if (jTableEmployees.getSelectedRow() >= 0) {
            System.out.println((int) jTableEmployees.getValueAt(jTableEmployees.getSelectedRow(), 0));
            try {
                Manager managerOut = new Manager((int) jTableEmployees.getValueAt(jTableEmployees.getSelectedRow(), 0));
                conexionTransaccional = Connect.getConnection();
                //estado de autocommit
                if (conexionTransaccional.getAutoCommit()) {
                    conexionTransaccional.setAutoCommit(false);
                }
                modelEmp.removeRow(jTableEmployees.getSelectedRow());
                managerDAO = new ManagerDAO(conexionTransaccional);
                managerDAO.delete(managerOut);
                conexionTransaccional.commit();
            } catch (SQLException ex) {
                ex.printStackTrace(System.out);
                //revertir la base de datos
                System.out.println("ROLLBACK - BDD");
                try {
                    conexionTransaccional.rollback();
                } catch (SQLException ex1) {
                    ex1.printStackTrace(System.out);
                }
            }

        } else {
            JOptionPane.showMessageDialog(null, "SELECCIONAR UN EMPLEADO");
        }
    }//GEN-LAST:event_jBtnRemoveEmployeeActionPerformed

    private void jBtnRemoveDelivererActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnRemoveDelivererActionPerformed
        if (jTableDelivery.getSelectedRow() >= 0) {
            System.out.println((int) jTableDelivery.getValueAt(jTableDelivery.getSelectedRow(), 0));
            try {
                DeliveryDriver delivererOut = new DeliveryDriver((int) jTableDelivery.getValueAt(jTableDelivery.getSelectedRow(), 0));
                conexionTransaccional = Connect.getConnection();
                //estado de autocommit
                if (conexionTransaccional.getAutoCommit()) {
                    conexionTransaccional.setAutoCommit(false);
                }
                modelDel.removeRow(jTableDelivery.getSelectedRow());
                deliveryDriverDAO = new DeliveryDriverDAO(conexionTransaccional);
                deliveryDriverDAO.delete(delivererOut);
                conexionTransaccional.commit();

            } catch (SQLException ex) {
                ex.printStackTrace(System.out);
                //revertir la base de datos
                System.out.println("ROLLBACK - BDD");
                try {
                    conexionTransaccional.rollback();
                } catch (SQLException ex1) {
                    ex1.printStackTrace(System.out);
                }
            }

        } else {
            JOptionPane.showMessageDialog(null, "SELECCIONAR UN REPARTIDOR");
        }
    }//GEN-LAST:event_jBtnRemoveDelivererActionPerformed

    private void jBtnAddEmployeeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnAddEmployeeActionPerformed
        SignInUI.alternative=1;
        signIn=new SignInUI();
        signIn.setVisible(true);
        dispose();
    }//GEN-LAST:event_jBtnAddEmployeeActionPerformed

    private void jBtnAddDelivererActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnAddDelivererActionPerformed
        SignInUI.alternative=2;
        signIn=new SignInUI();
        signIn.setVisible(true);
        dispose();
    }//GEN-LAST:event_jBtnAddDelivererActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Staff.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Staff.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Staff.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Staff.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Staff().setVisible(true);
            }
        });
    }

    public void initManagerTable() {
        modelEmp.addColumn("ID");
        modelEmp.addColumn("DOCUMENTO");
        modelEmp.addColumn("NOMBRE");
        modelEmp.addColumn("APELLIDO");
        modelEmp.addColumn("EMAIL");
        modelEmp.addColumn("TEL√âFONO");
        modelEmp.addColumn("DEPARTAMENTO");
    }

    public void initDeliveryTable() {
        modelDel.addColumn("ID");
        modelDel.addColumn("DOCUMENTO");
        modelDel.addColumn("NOMBRE");
        modelDel.addColumn("APELLIDO");
        modelDel.addColumn("EMAIL");
        modelDel.addColumn("TEL√âFONO");
        modelDel.addColumn("PLACA");
    }

    public void showManagers() {
        try {
            conexionTransaccional = Connect.getConnection();
            //estado de autocommit
            if (conexionTransaccional.getAutoCommit()) {
                conexionTransaccional.setAutoCommit(false);
            }
            managerDAO = new ManagerDAO(conexionTransaccional);
            managers = managerDAO.select();
//            conexionTransaccional.commit();

        } catch (SQLException ex) {
            ex.printStackTrace(System.out);
            //revertir la base de datos
            System.out.println("ROLLBACK - BDD");
            try {
                conexionTransaccional.rollback();
            } catch (SQLException ex1) {
                ex1.printStackTrace(System.out);
            }
        }
        for (Manager manager : managers) {
            this.modelEmp.addRow(new Object[]{
                manager.getId(),
                manager.getDocument(),
                manager.getName(),
                manager.getLastName(),
                manager.getEmail(),
                manager.getPhone(),
                manager.getDepartment()
            });
        }
    }

    public void showDeliveryDrivers() {
        try {
            conexionTransaccional = Connect.getConnection();
            //estado de autocommit
            if (conexionTransaccional.getAutoCommit()) {
                conexionTransaccional.setAutoCommit(false);
            }
            deliveryDriverDAO = new DeliveryDriverDAO(conexionTransaccional);
            deliveryDrivers = deliveryDriverDAO.select();
        } catch (SQLException ex) {
            ex.printStackTrace(System.out);
            //revertir la base de datos
            System.out.println("ROLLBACK - BDD");
            try {
                conexionTransaccional.rollback();
            } catch (SQLException ex1) {
                ex1.printStackTrace(System.out);
            }
        }
        for (DeliveryDriver deliveryDriver : deliveryDrivers) {
            this.modelDel.addRow(new Object[]{
                deliveryDriver.getId(),
                deliveryDriver.getDocument(),
                deliveryDriver.getName(),
                deliveryDriver.getLastName(),
                deliveryDriver.getEmail(),
                deliveryDriver.getPhone(),
                deliveryDriver.getLicensePlate()
            });
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBtnAddDeliverer;
    private javax.swing.JButton jBtnAddEmployee;
    private javax.swing.JButton jBtnBack;
    private javax.swing.JButton jBtnRemoveDeliverer;
    private javax.swing.JButton jBtnRemoveEmployee;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTable jTableDelivery;
    private javax.swing.JTable jTableEmployees;
    // End of variables declaration//GEN-END:variables
}
